/*Poniżej przekazujemy zadanie z prośbą o analizę poniższego kodu i zaimplementowanie metod
 findBlockByColor, findBlocksByMaterial, count w klasie Wall - najchętniej unikając
  powielania kodu i umieszczając całą logikę w klasie Wall.
  Z uwzględnieniem w analizie i implementacji interfejsu CompositeBlock!

interface Structure {
// zwraca dowolny element o podanym kolorze
Optional findBlockByColor(String color);

// zwraca wszystkie elementy z danego materiału
List findBlocksByMaterial(String material);

//zwraca liczbę wszystkich elementów tworzących strukturę
int count();
}

public class Wall implements Structure {
private List blocks;
}

interface Block {
String getColor();
String getMaterial();
}

interface CompositeBlock extends Block {
List getBlocks();
}
*/

// THIS PROGRAM WILL CREATE BLOCKS OF STONE OR WOOD, IN RED, WHITE OR BLUE COLORS ONLY

import java.util.*;

interface Structure {
    Optional findBlockByColor(String color);
    List findBlocksByMaterial(String material);
    int count();
}

interface Block {
    String getColor();
    String getMaterial();
}

interface CompositeBlock extends Block {
    List getBlocks();
}


public class Wall implements Structure{
    private List <Block>blocks = new ArrayList<>();
    static Wall wall = new Wall();
    static Wall.ListOfBlocks aaa;


    public static void main(String[] args) {
        aaa = wall.new ListOfBlocks();

        Wall.WoodenBlock br1=wall.new WoodenBlock("red");
        Wall.WoodenBlock br2=wall.new WoodenBlock("white");
        Wall.WoodenBlock br3=wall.new WoodenBlock("blue");
        Wall.StoneBlock br4=wall.new StoneBlock("red");
        Wall.StoneBlock br5=wall.new StoneBlock("white");
        Wall.StoneBlock br6=wall.new StoneBlock("blue");


        wall.aaa.addBlocks(br1);
        aaa.addBlocks(br2);
        aaa.addBlocks(br3);
        aaa.addBlocks(br4);
        aaa.addBlocks(br5);
        aaa.addBlocks(br6);


        System.out.println();
        System.out.println("List of blocks: " + aaa.getBlocks().toString());
        System.out.println();
        System.out.println("All stone blocks: " + wall.findBlocksByMaterial("stone"));
        System.out.println("All wooden blocks: " + wall.findBlocksByMaterial("wood"));
        System.out.println();
        System.out.println("A red block: " + wall.findBlockByColor("red"));
        System.out.println("A white block: " + wall.findBlockByColor("white"));
        System.out.println("A blue block: " + wall.findBlockByColor("blue"));
        System.out.println();
        System.out.println("List of blocks after sorting by color: " + aaa.getBlocks().toString());
        System.out.println();
        System.out.println("Number of blocks in the list: " + wall.count());
    }//close main


     // inner class woodenBlock
    public class WoodenBlock implements Block {
        private String color;
        private String material;

        public WoodenBlock(String color) {
            this.color=color;
            this.material="wood";
        }

        public String getColor(){
            return color;
        };
        public String getMaterial(){
            return material;
        };

        @Override
        public String toString() {
            return color + " " + material;
        }
    }//close inner class WoodenBlock


    // inner class StoneBlock
    public class StoneBlock implements Block {
        private String color;
        private String material;

        public StoneBlock(String color) {
            this.color=color;
            this.material="stone";
        }

        public String getColor(){
            return color;
        };
        public String getMaterial(){
            return material;
        };

        @Override
        public String toString() {
            return color + " " + material;
        }
    }//close inner class StoneBlock

    // inner class stoneBlock
    public class ListOfBlocks implements CompositeBlock {

        public void addBlocks(Block b){
            blocks.add(b);
        }

        public List getBlocks(){
            return blocks;
        };

        @Override
        public String getColor() {
            return null;
        }

        @Override
        public String getMaterial() {
            return null;
        }
    }//close inner class ListOfBlocks

    public Optional findBlockByColor(String color){

        Comparator<Block> comp = new Comparator<Block>() {
            public int compare(Block b1, Block b2) {
                return b1.getColor().compareTo(b2.getColor());
            }
        };

        Collections.sort(aaa.getBlocks(), comp);
        int index = Collections.binarySearch(aaa.getBlocks(), new StoneBlock(color), comp);

        return Optional.of(aaa.getBlocks().get(index));
    }; //close findBlockByColor

    public List findBlocksByMaterial(String material){
        List <Block>materialList=new ArrayList<Block>();
        List <Block>tempList=new ArrayList<Block>(aaa.getBlocks());
        for(Block b : tempList){
            if(b.getMaterial().equals(material)){
                materialList.add(b);
            }
        }
        return materialList;
    }; //close findBlocksByMaterial

    public int count(){
        return aaa.getBlocks().size();
    };

}//close class Wall











