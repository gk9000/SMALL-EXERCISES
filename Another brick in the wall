/*Poniżej przekazujemy zadanie z prośbą o analizę poniższego kodu i zaimplementowanie metod
 findBlockByColor, findBlocksByMaterial, count w klasie Wall - najchętniej unikając
  powielania kodu i umieszczając całą logikę w klasie Wall.
  Z uwzględnieniem w analizie i implementacji interfejsu CompositeBlock!

interface Structure {
// zwraca dowolny element o podanym kolorze
Optional findBlockByColor(String color);

// zwraca wszystkie elementy z danego materiału
List findBlocksByMaterial(String material);

//zwraca liczbę wszystkich elementów tworzących strukturę
int count();
}

public class Wall implements Structure {
private List blocks;
}

interface Block {
String getColor();
String getMaterial();
}

interface CompositeBlock extends Block {
List getBlocks();
}
*/

// THIS PROGRAM WILL CREATE BLOCKS OF STONE OR WOOD, IN RED, WHITE OR BLUE COLORS ONLY

import java.util.*;

interface Structure {
    Optional findBlockByColor(String color);
    List findBlocksByMaterial(String material);
    int count();
}

interface SimpleBlock {
    String getColor();
    String getMaterial();
}

interface CompositeBlock extends SimpleBlock {
    List getBlocks();
}


public class Wall implements Structure{
    private List <Block>blocks=new ArrayList<Block>();
    Wall.Block tempObject= new Block("red", "wood");


    public Optional findBlockByColor(String color){

            Comparator<Block> comp = new Comparator<Block>() {
                public int compare(Block b1, Block b2) {
                    return b1.getColor().compareTo(b2.getColor());
                }
            };

            Collections.sort(tempObject.getBlocks(), comp);
            int index = Collections.binarySearch(tempObject.getBlocks(), new Block(color, "wood"), comp);
            tempObject.getBlocks().remove(tempObject.getBlocks().size() - 1);

            return Optional.of(tempObject.getBlocks().get(index));
    }; //close findBlockByColor

    public List findBlocksByMaterial(String material){
        List <Block>materialList=new ArrayList<Block>();
        List <Block>tempList=new ArrayList<Block>(tempObject.getBlocks());
        for(Block b : tempList){
            if(b.getMaterial().equals(material)){
                materialList.add(b);
            }
        }
        return materialList;
    }; //close findBlocksByMaterial

    public int count(){
        return tempObject.getBlocks().size();
    };

    public static void main(String[] args) {
        Wall wall = new Wall();

        wall.tempObject.getBlocks().remove(wall.tempObject);

        Wall.Block br1=wall.new Block("red","wood");
        Wall.Block br2=wall.new Block("white","wood");
        Wall.Block br3=wall.new Block("blue","wood");
        Wall.Block br4=wall.new Block("red","stone");
        Wall.Block br5=wall.new Block("white","stone");
        Wall.Block br6=wall.new Block("blue","stone");
        
        System.out.println();
        System.out.println("List of blocks: " + br1.getBlocks().toString());
        System.out.println();
        System.out.println("All stone blocks: " + wall.findBlocksByMaterial("stone"));
        System.out.println("All wooden blocks: " + wall.findBlocksByMaterial("wood"));
        System.out.println();
        System.out.println("A red block: " + wall.findBlockByColor("red"));
        System.out.println("A white block: " + wall.findBlockByColor("white"));
        System.out.println("A blue block: " + wall.findBlockByColor("blue"));
        System.out.println();
        System.out.println("List of blocks after sorting by color: " + br1.getBlocks().toString());
        System.out.println();
        System.out.println("Number of blocks in the list: " + wall.count());
    }//close main


     // inner class Block that creates blocks
    class Block implements CompositeBlock {
        private String color;
        private String material;

        public Block(String color, String material) {
            this.setColor(color.toLowerCase());
            this.setMaterial(material.toLowerCase());
            blocks.add (this);
        }
        public void setColor(String color) {
            ArrayList<String> colors = new ArrayList<>(Arrays.asList("red", "white", "blue"));
            if ( validate (color, colors) ) {
                this.color = color;
            } else {
                throw new IllegalArgumentException("No such color");
            }
        }
        public void setMaterial(String material) {
            ArrayList<String> materials = new ArrayList<>(Arrays.asList("wood", "stone"));
            if ( validate (material, materials) ) {
                this.material = material;
            } else {
                throw new IllegalArgumentException("No such material");
            }
            this.material = material;
        }
        public String getColor(){
            return color;
        };
        public String getMaterial(){
            return material;
        };
        public List getBlocks(){
            return blocks;
        };
        private static boolean validate(String a, ArrayList<String> b){
            return  b.stream().anyMatch(s -> s.equals(a));
        }
        @Override
        public String toString() {
            return color + " " + material;
        }
    }//close inner class Block
}//close class Wall











